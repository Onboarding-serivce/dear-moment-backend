services:
  db:
    image: gvenzl/oracle-free:slim
    container_name: oracle-db
    ports:
      - "1522:1521"
    env_file:
      - .env
    environment:
      ORACLE_PASSWORD: "${ORACLE_PASSWORD}"
      APP_USER: "${APP_USER}"
      APP_USER_PASSWORD: "${APP_USER_PASSWORD}"
    volumes:
      - db_data:/opt/oracle/oradata

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: spring-app
    ports:
      - "8080:8080"
    volumes:
      - ./src:/app/src
      - ./build.gradle.kts:/app/build.gradle.kts
      - ./settings.gradle.kts:/app/settings.gradle.kts
    env_file:
      - .env
    environment:
      SPRING_DATASOURCE_URL: "${SPRING_DATASOURCE_URL}"
      SPRING_DATASOURCE_USERNAME: "${SPRING_DATASOURCE_USERNAME}"
      SPRING_DATASOURCE_PASSWORD: "${SPRING_DATASOURCE_PASSWORD}"
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: "${SPRING_DATASOURCE_DRIVER_CLASS_NAME}"
      SPRING_JPA_HIBERNATE_DDL_AUTO: "${SPRING_JPA_HIBERNATE_DDL_AUTO}"
      SPRING_JPA_SHOW_SQL: "${SPRING_JPA_SHOW_SQL}"
      SPRING_JPA_DATABASE_PLATFORM: "${SPRING_JPA_DATABASE_PLATFORM}"
      SPRING_PROFILES_ACTIVE: "${SPRING_PROFILES_ACTIVE}"
      SPRING_APPLICATION_NAME: "${SPRING_APPLICATION_NAME}"
    # (4) 아래 command는 Dockerfile의 ENTRYPOINT를 덮어쓸 수 있음
    #    - 만약 Dockerfile 쪽 순서를 그대로 쓰려면 command를 생략하거나 동일하게 적어주면 됨
    command: >
      /app/wait-for-it.sh db:1521 -- bash -c "
      source /root/.sdkman/bin/sdkman-init.sh &&
      ./gradlew prepareSwagger &&
      ./gradlew bootRun --rerun-tasks
      "
    depends_on:
      - db

volumes:
  db_data:
    driver: local
